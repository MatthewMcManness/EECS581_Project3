# Prologue Comments:
# Code Artifact: Calendar and To-Do List UI Definition (Kivy Layout)
# Brief Description: This code defines the layout and structure of a Kivy app that provides a navigable Calendar view 
# and a To-Do List view. It includes buttons to switch between the views, options to add tasks or events, 
# and functionality for displaying and interacting with tasks and dates.
# Programmer: Matthew McManness (2210261), Magaly Camacho (3072618) ADD YOUR Name and add your revisions to the revision list
# Date Created: October 26, 2024
# Dates Revised:
#   - October 26, 2024: Initial implementation and basic structure - [Matthew McManness]
#   - [Insert Further Revisions]: [Briefly describe changes or improvements] - [Your Name]
#   - October 27, 2024: Provided proper comments - [Matthew McManness]
#   - November 4, 2024: Removed example tasks - [Magaly Camacho]
#   - November 10, 2024: updated the calendar view so that the week starts on a Sunday - Matthew McManness
# Preconditions: 
#   - Kivy must be installed and correctly configured.
#   - This layout expects methods like `open_add_task_modal()`, `switch_to_screen()`, 
#     and `mark_task_complete()` to be defined in the main app.
# Acceptable Input: 
#   - Input is provided through user interactions with buttons and fields.
#   - Expected interactions include navigation between views, adding tasks, marking tasks as complete, and sorting tasks.
# Unacceptable Input:
#   - Unexpected or unhandled actions (e.g., undefined button handlers) could result in runtime errors.
# Postconditions:
#   - Tasks and calendar entries are dynamically displayed and modifiable through the interface.
# Return Values:
#   - No direct return values, as this layout functions within the Kivy app framework.
# Error and Exception Conditions:
#   - If necessary handlers are not defined (e.g., `app.open_add_task_modal()`), the app will raise an exception.
# Side Effects:
#   - Switching between views resets the task list or calendar display.
#   - User interactions update the visual state of the UI (e.g., task status).
# Invariants:
#   - The layout structure should remain consistent regardless of view changes.
# Known Faults:
#   - None identified; ensure all handlers are implemented correctly to avoid runtime errors.

ScreenManager:
    id: screen_manager  # Identifier for the screen manager to facilitate screen transitions.
    CalendarView:  # Adds the CalendarView screen to the manager.
    ToDoListView:  # Adds the ToDoListView screen to the manager.
    DailyView: # Add the DailyView screen to the manager.

<CalendarView>:
    name: "calendar"  # Assigns a unique name to the CalendarView for navigation purposes.

    BoxLayout:
        orientation: 'vertical'  # Organizes the child widgets vertically.

        # Header with calendar title and menu button.
        BoxLayout:
            size_hint_y: None  # Fixes the height for the header layout.
            height: dp(50)  # Height in density-independent pixels.
            Label:
                text: "Calendar"  # Displays the screen title.
                font_size: dp(20)  # Sets the title font size.
                size_hint_x: 1  # Expands the label to fill the available space.
            Button:
                text: "Daily View"
                size_hint_x: 0.2
                on_release: app.switch_to_daily_view_today()  # Call the Python method


        # Month navigation with Previous and Next buttons.
        BoxLayout:
            size_hint_y: None  # Fixed height for the navigation bar.
            height: dp(40)  # Height of the navigation bar.
            Button:
                text: "Previous"  # Navigates to the previous month.
                on_press: root.change_month(-1)  # Decrements the month.
            Label:
                text: root.month_year_text  # Displays the current month and year.
                font_size: dp(18)  # Font size for the month-year text.
            Button:
                text: "Next"  # Navigates to the next month.
                on_press: root.change_month(1)  # Increments the month.

        # Header displaying the days of the week.
        BoxLayout:
            size_hint_y: None  # Fixed height for the weekday header.
            height: "50dp"  # Sets the height of the header.
            Label:
                text: "Sun"  # Displays Sunday.
                halign: "center"
            Label:
                text: "Mon"  # Displays Monday.
                halign: "center"  # Centers the text horizontally.
            Label:
                text: "Tue"  # Displays Tuesday.
                halign: "center"
            Label:
                text: "Wed"  # Displays Wednesday.
                halign: "center"
            Label:
                text: "Thu"  # Displays Thursday.
                halign: "center"
            Label:
                text: "Fri"  # Displays Friday.
                halign: "center"
            Label:
                text: "Sat"  # Displays Saturday.
                halign: "center"

        # Scrollable calendar grid for displaying day buttons.
        ScrollView:
            do_scroll_x: False  # Disables horizontal scrolling.
            do_scroll_y: True  # Enables vertical scrolling.
            GridLayout:
                id: calendar_grid  # Identifier for the calendar grid.
                cols: 7  # 7 columns for 7 days of the week.
                padding: dp(10)  # Padding around the grid.
                spacing: dp(1)  # Space between each grid item.
                row_default_height: dp(60)  # Default row height.
                row_force_default: True  # Ensures all rows are the same height.
                adaptive_height: True  # Adjusts height based on content.

        # Button to open the Add Task popup.
        BoxLayout:
            size_hint_y: 0.2  # Adjusts the height.
            Button:
                text: "Add Event"  # Opens a popup for adding tasks.
                on_release: app.open_add_event_modal()  # Calls the add event modal.

        # Button to switch to the To-Do List screen.
        BoxLayout:
            size_hint_y: 0.2  # Adjusts the height.
            Button:
                text: "To-Do List"  # Button to switch screens.
                on_release: app.switch_to_screen("todo")  # Switches to the To-Do List.

<ToDoListView>:
    name: "todo"

    BoxLayout:
        orientation: 'vertical'

        # Header with To-Do List title
        BoxLayout:
            size_hint_y: None
            height: dp(50)
            Label:
                text: "To-Do List"
                font_size: dp(20)
                size_hint_x: 1

        # Sort options and add task button
        BoxLayout:
            size_hint_y: None
            height: "50dp"
            padding: "10dp"
            spacing: "10dp"

            Button:
                text: "Add Task"
                on_release: app.open_add_task_modal()

            Spinner:
                text: "Sort by"
                values: ["Priority", "Due Date", "Category"]
                on_text: root.sort_tasks(self.text)

            Button:
                text: "Calendar View"
                on_release: app.switch_to_screen("calendar")

        # Scrollable task list
        ScrollView:
            GridLayout:
                id: task_list
                cols: 1
                spacing: "5dp"
                size_hint_y: None
                height: self.minimum_height
                
                # Sample task item
                BoxLayout:
                    padding: "2dp"
                    spacing: "2dp"
                    size_hint_y: None
                    height: "30dp"
                    canvas.before:
                        Color:
                            rgba: (0.9, 0.9, 0.9, 1) if self.height > 50 else (1, 1, 1, 1)
                        Rectangle:
                            size: self.size
                            pos: self.pos
                    
                    Label:
                        text: "C"
                        size_hint_x: 0.1
                        color: (0.9, 0.9, 0.9, 1)
                    
                    Label:
                        text: "Task Title"
                        size_hint_x: 0.5
                        color: (0, 0, 0, 1)

                    Label:
                        text: "Due Date"
                        size_hint_x: 0.3
                        color: (0, 0, 0, 1)

                    Label:
                        text: "!"
                        size_hint_x: 0.1
                        color: (1, 0, 0, 1)  # Red exclamation for priority
                        font_size: "24sp"

                    Label:
                        text: "Categories"
                        size_hint_x: 0.2
                        color: (0, 0, 0, 1)
                    
        # Footer with Add Task button
        BoxLayout:
            size_hint_y: None
            height: dp(50)
            Button:
                text: "Add Task"
                on_release: app.open_add_task_modal()
                
<DailyView>:
    name: "daily"  # Unique name for DailyView screen.
    BoxLayout:
        orientation: 'vertical'

        # Header with date navigation
        BoxLayout:
            size_hint_y: None
            height: dp(50)
            Button:
                text: "Back"  # Navigate back to the calendar view.
                on_press: app.switch_to_screen("calendar")  # Switch back to the calendar.
            Label:
                id: date_label
                text: "Date"
                font_size: dp(18)
                size_hint_x: 1
            Button:
                text: "Previous"
                on_press: root.navigate_previous_day()  # Go to the previous day.
            Button:
                text: "Next"
                on_press: root.navigate_next_day()  # Go to the next day.

        # Scrollable event list
        ScrollView:
            GridLayout:
                id: event_list
                cols: 1
                spacing: "10dp"
                size_hint_y: None
                height: self.minimum_height

        # Add Event Button
        BoxLayout:
            size_hint_y: 0.2
            Button:
                text: "Add Event"
                on_release: root.add_event()
